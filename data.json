{
    "project": {
        "name": "rsvp",
        "description": "A lightweight library that provides tools for organizing asynchronous code",
        "version": "3.0.6",
        "url": ""
    },
    "files": {
        "lib/rsvp/promise/all.js": {
            "name": "lib/rsvp/promise/all.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/rsvp/promise/cast.js": {
            "name": "lib/rsvp/promise/cast.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/rsvp/promise/race.js": {
            "name": "lib/rsvp/promise/race.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/rsvp/promise/reject.js": {
            "name": "lib/rsvp/promise/reject.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/rsvp/promise/resolve.js": {
            "name": "lib/rsvp/promise/resolve.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "lib/rsvp/all-settled.js": {
            "name": "lib/rsvp/all-settled.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/all.js": {
            "name": "lib/rsvp/all.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/defer.js": {
            "name": "lib/rsvp/defer.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/events.js": {
            "name": "lib/rsvp/events.js",
            "modules": {},
            "classes": {
                "RSVP.EventTarget": 1
            },
            "fors": {
                "RSVP.EventTarget": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/filter.js": {
            "name": "lib/rsvp/filter.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/hash-settled.js": {
            "name": "lib/rsvp/hash-settled.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/hash.js": {
            "name": "lib/rsvp/hash.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/map.js": {
            "name": "lib/rsvp/map.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/node.js": {
            "name": "lib/rsvp/node.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/promise.js": {
            "name": "lib/rsvp/promise.js",
            "modules": {},
            "classes": {
                "RSVP.Promise": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "lib/rsvp/race.js": {
            "name": "lib/rsvp/race.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/reject.js": {
            "name": "lib/rsvp/reject.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/resolve.js": {
            "name": "lib/rsvp/resolve.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        },
        "lib/rsvp/rethrow.js": {
            "name": "lib/rsvp/rethrow.js",
            "modules": {},
            "classes": {},
            "fors": {
                "RSVP": 1
            },
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "RSVP": {
            "name": "RSVP",
            "shortname": "RSVP",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": []
        },
        "RSVP.EventTarget": {
            "name": "RSVP.EventTarget",
            "shortname": "RSVP.EventTarget",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/rsvp/events.js",
            "line": 19
        },
        "RSVP.Promise": {
            "name": "RSVP.Promise",
            "shortname": "RSVP.Promise",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "lib/rsvp/promise.js",
            "line": 22,
            "description": "Promise objects represent the eventual result of an asynchronous operation. The\nprimary way of interacting with a promise is through its `then` method, which\nregisters callbacks to receive either a promiseâ€™s eventual value or the reason\nwhy the promise cannot be fulfilled.\n\nTerminology\n-----------\n\n- `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n- `thenable` is an object or function that defines a `then` method.\n- `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n- `exception` is a value that is thrown using the throw statement.\n- `reason` is a value that indicates why a promise was rejected.\n- `settled` the final resting state of a promise, fulfilled or rejected.\n\nA promise can be in one of three states: pending, fulfilled, or rejected.\n\nPromises that are fulfilled have a fulfillment value and are in the fulfilled\nstate.  Promises that are rejected have a rejection reason and are in the\nrejected state.  A fulfillment value is never a thenable.\n\nPromises can also be said to *resolve* a value.  If this value is also a\npromise, then the original promise's settled state will match the value's\nsettled state.  So a promise that *resolves* a promise that rejects will\nitself reject, and a promise that *resolves* a promise that fulfills will\nitself fulfill.\n\n\nBasic Usage:\n------------\n\n```js\nvar promise = new Promise(function(resolve, reject) {\n  // on success\n  resolve(value);\n\n  // on failure\n  reject(reason);\n});\n\npromise.then(function(value) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n```\n\nAdvanced Usage:\n---------------\n\nPromises shine when abstracting away asynchronous interactions such as\n`XMLHttpRequest`s.\n\n```js\nfunction getJSON(url) {\n  return new Promise(function(resolve, reject){\n    var xhr = new XMLHttpRequest();\n\n    xhr.open('GET', url);\n    xhr.onreadystatechange = handler;\n    xhr.responseType = 'json';\n    xhr.setRequestHeader('Accept', 'application/json');\n    xhr.send();\n\n    function handler() {\n      if (this.readyState === this.DONE) {\n        if (this.status === 200) {\n          resolve(this.response);\n        } else {\n          reject(new Error(\"getJSON: `\" + url + \"` failed with status: [\" + this.status + \"]\"));\n        }\n      }\n    };\n  });\n}\n\ngetJSON('/posts.json').then(function(json) {\n  // on fulfillment\n}, function(reason) {\n  // on rejection\n});\n```\n\nUnlike callbacks, promises are great composable primitives.\n\n```js\nPromise.all([\n  getJSON('/posts'),\n  getJSON('/comments')\n]).then(function(values){\n  values[0] // => postsJSON\n  values[1] // => commentsJSON\n\n  return values;\n});\n```",
            "params": [
                {
                    "name": "UNKNOWN",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "lib/rsvp/promise/all.js",
            "line": 6,
            "description": "`RSVP.Promise.all` accepts an array of promises, and returns a new promise which\nis fulfilled with an array of fulfillment values for the passed promises, or\nrejected with the reason of the first passed promise to be rejected. It casts all\nelements of the passed iterable to promises as it runs this algorithm.\n\nExample:\n\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.resolve(2);\nvar promise3 = RSVP.resolve(3);\nvar promises = [ promise1, promise2, promise3 ];\n\nRSVP.Promise.all(promises).then(function(array){\n  // The array here would be [ 1, 2, 3 ];\n});\n```\n\nIf any of the `promises` given to `RSVP.all` are rejected, the first promise\nthat is rejected will be given as an argument to the returned promises's\nrejection handler. For example:\n\nExample:\n\n```javascript\nvar promise1 = RSVP.resolve(1);\nvar promise2 = RSVP.reject(new Error(\"2\"));\nvar promise3 = RSVP.reject(new Error(\"3\"));\nvar promises = [ promise1, promise2, promise3 ];\n\nRSVP.Promise.all(promises).then(function(array){\n  // Code here never runs because there are rejected promises!\n}, function(error) {\n  // error.message === \"2\"\n});\n```",
            "itemtype": "method",
            "name": "all",
            "static": 1,
            "params": [
                {
                    "name": "entries",
                    "description": "array of promises",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise that is fulfilled when all `promises` have been\nfulfilled, or rejected if any of them become rejected.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/promise/cast.js",
            "line": 1,
            "deprecated": true,
            "deprecationMessage": "`RSVP.Promise.cast` coerces its argument to a promise, or returns the\nargument if it is already a promise which shares a constructor with the caster.\n\nExample:\n\n```javascript\nvar promise = RSVP.Promise.resolve(1);\nvar casted = RSVP.Promise.cast(promise);\n\nconsole.log(promise === casted); // true\n```\n\nIn the case of a promise whose constructor does not match, it is assimilated.\nThe resulting promise will fulfill or reject based on the outcome of the\npromise being casted.\n\nExample:\n\n```javascript\nvar thennable = $.getJSON('/api/foo');\nvar casted = RSVP.Promise.cast(thennable);\n\nconsole.log(thennable === casted); // false\nconsole.log(casted instanceof RSVP.Promise) // true\n\ncasted.then(function(data) {\n  // data is the value getJSON fulfills with\n});\n```\n\nIn the case of a non-promise, a promise which will fulfill with that value is\nreturned.\n\nExample:\n\n```javascript\nvar value = 1; // could be a number, boolean, string, undefined...\nvar casted = RSVP.Promise.cast(value);\n\nconsole.log(value === casted); // false\nconsole.log(casted instanceof RSVP.Promise) // true\n\ncasted.then(function(val) {\n  val === value // => true\n});\n```\n\n`RSVP.Promise.cast` is similar to `RSVP.Promise.resolve`, but `RSVP.Promise.cast` differs in the\nfollowing ways:\n\n* `RSVP.Promise.cast` serves as a memory-efficient way of getting a promise, when you\nhave something that could either be a promise or a value. RSVP.resolve\nwill have the same effect but will create a new promise wrapper if the\nargument is a promise.\n* `RSVP.Promise.cast` is a way of casting incoming thenables or promise subclasses to\npromises of the exact class specified, so that the resulting object's `then` is\nensured to have the behavior of the constructor you are calling cast on (i.e., RSVP.Promise).",
            "itemtype": "method",
            "name": "cast",
            "static": 1,
            "params": [
                {
                    "name": "object",
                    "description": "to be casted",
                    "type": "Object"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/promise/race.js",
            "line": 9,
            "description": "`RSVP.Promise.race` returns a new promise which is settled in the same way as the\nfirst passed promise to settle.\n\nExample:\n\n```javascript\nvar promise1 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve(\"promise 1\");\n  }, 200);\n});\n\nvar promise2 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve(\"promise 2\");\n  }, 100);\n});\n\nRSVP.Promise.race([promise1, promise2]).then(function(result){\n  // result === \"promise 2\" because it was resolved before promise1\n  // was resolved.\n});\n```\n\n`RSVP.Promise.race` is deterministic in that only the state of the first\nsettled promise matters. For example, even if other promises given to the\n`promises` array argument are resolved, but the first settled promise has\nbecome rejected before the other promises became fulfilled, the returned\npromise will become rejected:\n\n```javascript\nvar promise1 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    resolve(\"promise 1\");\n  }, 200);\n});\n\nvar promise2 = new RSVP.Promise(function(resolve, reject){\n  setTimeout(function(){\n    reject(new Error(\"promise 2\"));\n  }, 100);\n});\n\nRSVP.Promise.race([promise1, promise2]).then(function(result){\n  // Code here never runs\n}, function(reason){\n  // reason.message === \"promise2\" because promise 2 became rejected before\n  // promise 1 became fulfilled\n});\n```\n\nAn example real-world use case is implementing timeouts:\n\n```javascript\nRSVP.Promise.race([ajax('foo.json'), timeout(5000)])\n```",
            "itemtype": "method",
            "name": "race",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "array of promises to observe",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "optional string for describing the promise returned.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a promise which settles in the same way as the first passed\npromise to settle.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/promise/reject.js",
            "line": 1,
            "description": "`RSVP.Promise.reject` returns a promise rejected with the passed `reason`.\nIt is shorthand for the following:\n\n```javascript\nvar promise = new RSVP.Promise(function(resolve, reject){\n  reject(new Error('WHOOPS'));\n});\n\npromise.then(function(value){\n  // Code here doesn't run because the promise is rejected!\n}, function(reason){\n  // reason.message === 'WHOOPS'\n});\n```\n\nInstead of writing the above, your code now simply becomes the following:\n\n```javascript\nvar promise = RSVP.Promise.reject(new Error('WHOOPS'));\n\npromise.then(function(value){\n  // Code here doesn't run because the promise is rejected!\n}, function(reason){\n  // reason.message === 'WHOOPS'\n});\n```",
            "itemtype": "method",
            "name": "reject",
            "static": 1,
            "params": [
                {
                    "name": "reason",
                    "description": "value that the returned promise will be rejected with.",
                    "type": "Any"
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a promise rejected with the given `reason`.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/promise/resolve.js",
            "line": 1,
            "description": "`RSVP.Promise.resolve` returns a promise that will become resolved with the\npassed `value`. It is shorthand for the following:\n\n```javascript\nvar promise = new RSVP.Promise(function(resolve, reject){\n  resolve(1);\n});\n\npromise.then(function(value){\n  // value === 1\n});\n```\n\nInstead of writing the above, your code now simply becomes the following:\n\n```javascript\nvar promise = RSVP.Promise.resolve(1);\n\npromise.then(function(value){\n  // value === 1\n});\n```",
            "itemtype": "method",
            "name": "resolve",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "value that the returned promise will be resolved with",
                    "type": "Any"
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a promise that will become fulfilled with the given\n`value`",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/all-settled.js",
            "line": 7,
            "description": "`RSVP.allSettled` is similar to `RSVP.all`, but instead of implementing\na fail-fast method, it waits until all the promises have returned and\nshows you all the results. This is useful if you want to handle multiple\npromises' failure states together as a set.\n\nReturns a promise that is fulfilled when all the given promises have been\nsettled. The return promise is fulfilled with an array of the states of\nthe promises passed into the `promises` array argument.\n\nEach state object will either indicate fulfillment or rejection, and\nprovide the corresponding value or reason. The states will take one of\nthe following formats:\n\n```javascript\n{ state: 'fulfilled', value: value }\n  or\n{ state: 'rejected', reason: reason }\n```\n\nExample:\n\n```javascript\nvar promise1 = RSVP.Promise.resolve(1);\nvar promise2 = RSVP.Promise.reject(new Error('2'));\nvar promise3 = RSVP.Promise.reject(new Error('3'));\nvar promises = [ promise1, promise2, promise3 ];\n\nRSVP.allSettled(promises).then(function(array){\n  // array == [\n  //   { state: 'fulfilled', value: 1 },\n  //   { state: 'rejected', reason: Error },\n  //   { state: 'rejected', reason: Error }\n  // ]\n  // Note that for the second item, reason.message will be \"2\", and for the\n  // third item, reason.message will be \"3\".\n}, function(error) {\n  // Not run. (This block would only be called if allSettled had failed,\n  // for instance if passed an incorrect argument type.)\n});\n```",
            "itemtype": "method",
            "name": "allSettled",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "- optional string that describes the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise that is fulfilled with an array of the settled\nstates of the constituent promises.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/all.js",
            "line": 3,
            "description": "This is a convenient alias for `RSVP.Promise.all`.",
            "itemtype": "method",
            "name": "all",
            "static": 1,
            "params": [
                {
                    "name": "array",
                    "description": "Array of promises.",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "An optional label. This is useful\nfor tooling.",
                    "type": "String"
                }
            ],
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/defer.js",
            "line": 3,
            "description": "`RSVP.defer` returns an object similar to jQuery's `$.Deferred`.\n`RSVP.defer` should be used when porting over code reliant on `$.Deferred`'s\ninterface. New code should use the `RSVP.Promise` constructor instead.\n\nThe object returned from `RSVP.defer` is a plain object with three properties:\n\n* promise - an `RSVP.Promise`.\n* reject - a function that causes the `promise` property on this object to\n  become rejected\n* resolve - a function that causes the `promise` property on this object to\n  become fulfilled.\n\nExample:\n\n ```javascript\n var deferred = RSVP.defer();\n\n deferred.resolve(\"Success!\");\n\n defered.promise.then(function(value){\n   // value here is \"Success!\"\n });\n ```",
            "itemtype": "method",
            "name": "defer",
            "static": 1,
            "params": [
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/events.js",
            "line": 24,
            "description": "`RSVP.EventTarget.mixin` extends an object with EventTarget methods. For\nExample:\n\n```javascript\nvar object = {};\n\nRSVP.EventTarget.mixin(object);\n\nobject.on(\"finished\", function(event) {\n  // handle event\n});\n\nobject.trigger(\"finished\", { detail: value });\n```\n\n`EventTarget.mixin` also works with prototypes:\n\n```javascript\nvar Person = function() {};\nRSVP.EventTarget.mixin(Person.prototype);\n\nvar yehuda = new Person();\nvar tom = new Person();\n\nyehuda.on(\"poke\", function(event) {\n  console.log(\"Yehuda says OW\");\n});\n\ntom.on(\"poke\", function(event) {\n  console.log(\"Tom says OW\");\n});\n\nyehuda.trigger(\"poke\");\ntom.trigger(\"poke\");\n```",
            "itemtype": "method",
            "name": "mixin",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "object",
                    "description": "object to extend with EventTarget methods",
                    "type": "Object"
                }
            ],
            "class": "RSVP.EventTarget"
        },
        {
            "file": "lib/rsvp/events.js",
            "line": 74,
            "description": "Registers a callback to be executed when `eventName` is triggered\n\n```javascript\nobject.on('event', function(eventInfo){\n  // handle the event\n});\n\nobject.trigger('event');\n```",
            "itemtype": "method",
            "name": "on",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the event to listen for",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "function to be called when the event is triggered.",
                    "type": "Function"
                }
            ],
            "class": "RSVP.EventTarget"
        },
        {
            "file": "lib/rsvp/events.js",
            "line": 105,
            "description": "You can use `off` to stop firing a particular callback for an event:\n\n```javascript\nfunction doStuff() { // do stuff! }\nobject.on('stuff', doStuff);\n\nobject.trigger('stuff'); // doStuff will be called\n\n// Unregister ONLY the doStuff callback\nobject.off('stuff', doStuff);\nobject.trigger('stuff'); // doStuff will NOT be called\n```\n\nIf you don't pass a `callback` argument to `off`, ALL callbacks for the\nevent will not be executed when the event fires. For example:\n\n```javascript\nvar callback1 = function(){};\nvar callback2 = function(){};\n\nobject.on('stuff', callback1);\nobject.on('stuff', callback2);\n\nobject.trigger('stuff'); // callback1 and callback2 will be executed.\n\nobject.off('stuff');\nobject.trigger('stuff'); // callback1 and callback2 will not be executed!\n```",
            "itemtype": "method",
            "name": "off",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventName",
                    "description": "event to stop listening to",
                    "type": "String"
                },
                {
                    "name": "callback",
                    "description": "optional argument. If given, only the function\ngiven will be removed from the event's callback queue. If no `callback`\nargument is given, all callbacks will be removed from the event's callback\nqueue.",
                    "type": "Function"
                }
            ],
            "class": "RSVP.EventTarget"
        },
        {
            "file": "lib/rsvp/events.js",
            "line": 159,
            "description": "Use `trigger` to fire custom events. For example:\n\n```javascript\nobject.on('foo', function(){\n  console.log('foo event happened!');\n});\nobject.trigger('foo');\n// 'foo event happened!' logged to the console\n```\n\nYou can also pass a value as a second argument to `trigger` that will be\npassed as an argument to all event listeners for the event:\n\n```javascript\nobject.on('foo', function(value){\n  console.log(value.name);\n});\n\nobject.trigger('foo', { name: 'bar' });\n// 'bar' logged to the console\n```",
            "itemtype": "method",
            "name": "trigger",
            "access": "private",
            "tagname": "",
            "params": [
                {
                    "name": "eventName",
                    "description": "name of the event to be triggered",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "optional value to be passed to any event handlers for\nthe given `eventName`",
                    "type": "Any"
                }
            ],
            "class": "RSVP.EventTarget"
        },
        {
            "file": "lib/rsvp/filter.js",
            "line": 4,
            "description": "`RSVP.filter` is similar to JavaScript's native `filter` method, except that it\n waits for all promises to become fulfilled before running the `filterFn` on\n each item in given to `promises`. `RSVP.filter` returns a promise that will\n become fulfilled with the result of running `filterFn` on the values the\n promises become fulfilled with.\n\n For example:\n\n ```javascript\n\n var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.resolve(2);\n var promise3 = RSVP.resolve(3);\n\n var promises = [promise1, promise2, promise3];\n\n var filterFn = function(item){\n   return item > 1;\n };\n\n RSVP.filter(promises, filterFn).then(function(result){\n   // result is [ 2, 3 ]\n });\n ```\n\n If any of the `promises` given to `RSVP.filter` are rejected, the first promise\n that is rejected will be given as an argument to the returned promise's\n rejection handler. For example:\n\n ```javascript\n var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.reject(new Error(\"2\"));\n var promise3 = RSVP.reject(new Error(\"3\"));\n var promises = [ promise1, promise2, promise3 ];\n\n var filterFn = function(item){\n   return item > 1;\n };\n\n RSVP.filter(promises, filterFn).then(function(array){\n   // Code here never runs because there are rejected promises!\n }, function(reason) {\n   // reason.message === \"2\"\n });\n ```\n\n `RSVP.filter` will also wait for any promises returned from `filterFn`.\n For instance, you may want to fetch a list of users then return a subset\n of those users based on some asynchronous operation:\n\n ```javascript\n\n var alice = { name: 'alice' };\n var bob   = { name: 'bob' };\n var users = [ alice, bob ];\n\n var promises = users.map(function(user){\n   return RSVP.resolve(user);\n });\n\n var filterFn = function(user){\n   // Here, Alice has permissions to create a blog post, but Bob does not.\n   return getPrivilegesForUser(user).then(function(privs){\n     return privs.can_create_blog_post === true;\n   });\n };\n RSVP.filter(promises, filterFn).then(function(users){\n   // true, because the server told us only Alice can create a blog post.\n   users.length === 1;\n   // false, because Alice is the only user present in `users`\n   users[0] === bob;\n });\n ```",
            "itemtype": "method",
            "name": "filter",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "filterFn",
                    "description": "- function to be called on each resolved value to\n filter the final results.",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string describing the promise. Useful for\n tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/hash-settled.js",
            "line": 7,
            "description": "`RSVP.hashSettled` is similar to `RSVP.allSettled`, but takes an object\ninstead of an array for its `promises` argument.\n\nUnlike `RSVP.all` or `RSVP.hash`, which implement a fail-fast method,\nbut like `RSVP.allSettled`, `hashSettled` waits until all the\nconstituent promises have returned and then shows you all the results\nwith their states and values/reasons. This is useful if you want to\nhandle multiple promises' failure states together as a set.\n\nReturns a promise that is fulfilled when all the given promises have been\nsettled, or rejected if the passed parameters are invalid.\n\nThe returned promise is fulfilled with a hash that has the same key names as\nthe `promises` object argument. If any of the values in the object are not\npromises, they will be copied over to the fulfilled object and marked with state\n'fulfilled'.\n\nExample:\n\n```javascript\nvar promises = {\n  myPromise: RSVP.Promise.resolve(1),\n  yourPromise: RSVP.Promise.resolve(2),\n  theirPromise: RSVP.Promise.resolve(3),\n  notAPromise: 4\n};\n\nRSVP.hashSettled(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise: { state: 'fulfilled', value: 1 },\n  //   yourPromise: { state: 'fulfilled', value: 2 },\n  //   theirPromise: { state: 'fulfilled', value: 3 },\n  //   notAPromise: { state: 'fulfilled', value: 4 }\n  // }\n});\n```\n\nIf any of the `promises` given to `RSVP.hash` are rejected, the state will\nbe set to 'rejected' and the reason for rejection provided.\n\nExample:\n\n```javascript\nvar promises = {\n  myPromise: RSVP.Promise.resolve(1),\n  rejectedPromise: RSVP.Promise.reject(new Error('rejection')),\n  anotherRejectedPromise: RSVP.Promise.reject(new Error('more rejection')),\n};\n\nRSVP.hashSettled(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise:              { state: 'fulfilled', value: 1 },\n  //   rejectedPromise:        { state: 'rejected', reason: Error },\n  //   anotherRejectedPromise: { state: 'rejected', reason: Error },\n  // }\n  // Note that for rejectedPromise, reason.message == 'rejection',\n  // and for anotherRejectedPromise, reason.message == 'more rejection'.\n});\n```\n\nAn important note: `RSVP.hashSettled` is intended for plain JavaScript objects that\nare just a set of keys and values. `RSVP.hashSettled` will NOT preserve prototype\nchains.\n\nExample:\n\n```javascript\nfunction MyConstructor(){\n  this.example = RSVP.Promise.resolve('Example');\n}\n\nMyConstructor.prototype = {\n  protoProperty: RSVP.Promise.resolve('Proto Property')\n};\n\nvar myObject = new MyConstructor();\n\nRSVP.hashSettled(myObject).then(function(hash){\n  // protoProperty will not be present, instead you will just have an\n  // object that looks like:\n  // {\n  //   example: { state: 'fulfilled', value: 'Example' }\n  // }\n  //\n  // hash.hasOwnProperty('protoProperty'); // false\n  // 'undefined' === typeof hash.protoProperty\n});\n```",
            "itemtype": "method",
            "name": "hashSettled",
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "label",
                    "description": "optional string that describes the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise that is fulfilled when when all properties of `promises`\nhave been settled.",
                "type": "Promise"
            },
            "static": 1,
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/hash.js",
            "line": 7,
            "description": "`RSVP.hash` is similar to `RSVP.all`, but takes an object instead of an array\nfor its `promises` argument.\n\nReturns a promise that is fulfilled when all the given promises have been\nfulfilled, or rejected if any of them become rejected. The returned promise\nis fulfilled with a hash that has the same key names as the `promises` object\nargument. If any of the values in the object are not promises, they will\nsimply be copied over to the fulfilled object.\n\nExample:\n\n```javascript\nvar promises = {\n  myPromise: RSVP.resolve(1),\n  yourPromise: RSVP.resolve(2),\n  theirPromise: RSVP.resolve(3),\n  notAPromise: 4\n};\n\nRSVP.hash(promises).then(function(hash){\n  // hash here is an object that looks like:\n  // {\n  //   myPromise: 1,\n  //   yourPromise: 2,\n  //   theirPromise: 3,\n  //   notAPromise: 4\n  // }\n});\n````\n\nIf any of the `promises` given to `RSVP.hash` are rejected, the first promise\nthat is rejected will be given as the reason to the rejection handler.\n\nExample:\n\n```javascript\nvar promises = {\n  myPromise: RSVP.resolve(1),\n  rejectedPromise: RSVP.reject(new Error(\"rejectedPromise\")),\n  anotherRejectedPromise: RSVP.reject(new Error(\"anotherRejectedPromise\")),\n};\n\nRSVP.hash(promises).then(function(hash){\n  // Code here never runs because there are rejected promises!\n}, function(reason) {\n  // reason.message === \"rejectedPromise\"\n});\n```\n\nAn important note: `RSVP.hash` is intended for plain JavaScript objects that\nare just a set of keys and values. `RSVP.hash` will NOT preserve prototype\nchains.\n\nExample:\n\n```javascript\nfunction MyConstructor(){\n  this.example = RSVP.resolve(\"Example\");\n}\n\nMyConstructor.prototype = {\n  protoProperty: RSVP.resolve(\"Proto Property\")\n};\n\nvar myObject = new MyConstructor();\n\nRSVP.hash(myObject).then(function(hash){\n  // protoProperty will not be present, instead you will just have an\n  // object that looks like:\n  // {\n  //   example: \"Example\"\n  // }\n  //\n  // hash.hasOwnProperty('protoProperty'); // false\n  // 'undefined' === typeof hash.protoProperty\n});\n```",
            "itemtype": "method",
            "name": "hash",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "label",
                    "description": "optional string that describes the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise that is fulfilled when all properties of `promises`\nhave been fulfilled, or rejected if any of them become rejected.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/map.js",
            "line": 7,
            "description": "`RSVP.map` is similar to JavaScript's native `map` method, except that it\n waits for all promises to become fulfilled before running the `mapFn` on\n each item in given to `promises`. `RSVP.map` returns a promise that will\n become fulfilled with the result of running `mapFn` on the values the promises\n become fulfilled with.\n\n For example:\n\n ```javascript\n\n var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.resolve(2);\n var promise3 = RSVP.resolve(3);\n var promises = [ promise1, promise2, promise3 ];\n\n var mapFn = function(item){\n   return item + 1;\n };\n\n RSVP.map(promises, mapFn).then(function(result){\n   // result is [ 2, 3, 4 ]\n });\n ```\n\n If any of the `promises` given to `RSVP.map` are rejected, the first promise\n that is rejected will be given as an argument to the returned promise's\n rejection handler. For example:\n\n ```javascript\n var promise1 = RSVP.resolve(1);\n var promise2 = RSVP.reject(new Error(\"2\"));\n var promise3 = RSVP.reject(new Error(\"3\"));\n var promises = [ promise1, promise2, promise3 ];\n\n var mapFn = function(item){\n   return item + 1;\n };\n\n RSVP.map(promises, mapFn).then(function(array){\n   // Code here never runs because there are rejected promises!\n }, function(reason) {\n   // reason.message === \"2\"\n });\n ```\n\n `RSVP.map` will also wait if a promise is returned from `mapFn`. For example,\n say you want to get all comments from a set of blog posts, but you need\n the blog posts first becuase they contain a url to those comments.\n\n ```javscript\n\n var mapFn = function(blogPost){\n   // getComments does some ajax and returns an RSVP.Promise that is fulfilled\n   // with some comments data\n   return getComments(blogPost.comments_url);\n };\n\n // getBlogPosts does some ajax and returns an RSVP.Promise that is fulfilled\n // with some blog post data\n RSVP.map(getBlogPosts(), mapFn).then(function(comments){\n   // comments is the result of asking the server for the comments\n   // of all blog posts returned from getBlogPosts()\n });\n ```",
            "itemtype": "method",
            "name": "map",
            "static": 1,
            "params": [
                {
                    "name": "promises",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "mapFn",
                    "description": "function to be called on each fulfilled promise.",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\n Useful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "promise that is fulfilled with the result of calling\n `mapFn` on each fulfilled promise or value when they become fulfilled.\n  The promise will be rejected if any of the given `promises` become rejected.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/node.js",
            "line": 6,
            "description": "`RSVP.denodeify` takes a \"node-style\" function and returns a function that\nwill return an `RSVP.Promise`. You can use `denodeify` in Node.js or the\nbrowser when you'd prefer to use promises over using callbacks. For example,\n`denodeify` transforms the following:\n\n```javascript\nvar fs = require('fs');\n\nfs.readFile('myfile.txt', function(err, data){\n  if (err) return handleError(err);\n  handleData(data);\n});\n```\n\ninto:\n\n```javascript\nvar fs = require('fs');\nvar readFile = RSVP.denodeify(fs.readFile);\n\nreadFile('myfile.txt').then(handleData, handleError);\n```\n\nIf the node function has multiple success parameters, then `denodeify`\njust returns the first one:\n\n```javascript\nvar request = RSVP.denodeify(require('request'));\n\nrequest('http://example.com').then(function(res) {\n  // ...\n});\n```\n\nHowever, if you need all success parameters, setting `denodeify`'s\nsecond parameter to `true` causes it to return all success parameters\nas an array:\n\n```javascript\nvar request = RSVP.denodeify(require('request'), true);\n\nrequest('http://example.com').then(function(result) {\n  // result[0] -> res\n  // result[1] -> body\n});\n```\n\nOr if you pass it an array with names it returns the parameters as a hash:\n\n```javascript\nvar request = RSVP.denodeify(require('request'), ['res', 'body']);\n\nrequest('http://example.com').then(function(result) {\n  // result.res\n  // result.body\n});\n```\n\nSometimes you need to retain the `this`:\n\n```javascript\nvar app = require('express')();\nvar render = RSVP.denodeify(app.render.bind(app));\n```\n\nThe denodified function inherits from the original function. It works in all\nenvironments, except IE 10 and below. Consequently all properties of the original\nfunction are available to you. However, any properties you change on the\ndenodeified function won't be changed on the original function. Example:\n\n```javascript\nvar request = RSVP.denodeify(require('request')),\n    cookieJar = request.jar(); // <- Inheritance is used here\n\nrequest('http://example.com', {jar: cookieJar}).then(function(res) {\n  // cookieJar.cookies holds now the cookies returned by example.com\n});\n```\n\nUsing `denodeify` makes it easier to compose asynchronous operations instead\nof using callbacks. For example, instead of:\n\n```javascript\nvar fs = require('fs');\n\nfs.readFile('myfile.txt', function(err, data){\n  if (err) { ... } // Handle error\n  fs.writeFile('myfile2.txt', data, function(err){\n    if (err) { ... } // Handle error\n    console.log('done')\n  });\n});\n```\n\nyou can chain the operations together using `then` from the returned promise:\n\n```javascript\nvar fs = require('fs');\nvar readFile = RSVP.denodeify(fs.readFile);\nvar writeFile = RSVP.denodeify(fs.writeFile);\n\nreadFile('myfile.txt').then(function(data){\n  return writeFile('myfile2.txt', data);\n}).then(function(){\n  console.log('done')\n}).catch(function(error){\n  // Handle error\n});\n```",
            "itemtype": "method",
            "name": "denodeify",
            "static": 1,
            "params": [
                {
                    "name": "nodeFunc",
                    "description": "a \"node-style\" function that takes a callback as\nits last argument. The callback expects an error to be passed as its first\nargument (if an error occurred, otherwise null), and the value from the\noperation as its second argument (\"function(err, value){ }\").",
                    "type": "Function"
                },
                {
                    "name": "argumentNames",
                    "description": "An optional paramter that if set\nto `true` causes the promise to fulfill with the callback's success arguments\nas an array. This is useful if the node function has multiple success\nparamters. If you set this paramter to an array with names, the promise will\nfulfill with a hash with these names as keys and the success parameters as\nvalues.",
                    "type": "Boolean|Array"
                }
            ],
            "return": {
                "description": "a function that wraps `nodeFunc` to return an\n`RSVP.Promise`",
                "type": "Function"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/promise.js",
            "line": 220,
            "description": "The primary way of interacting with a promise is through its `then` method,\nwhich registers callbacks to receive either a promise's eventual value or the\nreason why the promise cannot be fulfilled.\n\n```js\nfindUser().then(function(user){\n  // user is available\n}, function(reason){\n  // user is unavailable, and you are given the reason why\n});\n```\n\nChaining\n--------\n\nThe return value of `then` is itself a promise.  This second, \"downstream\"\npromise is resolved with the return value of the first promise's fulfillment\nor rejection handler, or rejected if the handler throws an exception.\n\n```js\nfindUser().then(function (user) {\n  return user.name;\n}, function (reason) {\n  return \"default name\";\n}).then(function (userName) {\n  // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n  // will be `\"default name\"`\n});\n\nfindUser().then(function (user) {\n  throw new Error(\"Found user, but still unhappy\");\n}, function (reason) {\n  throw new Error(\"`findUser` rejected and we're unhappy\");\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // if `findUser` fulfilled, `reason` will be \"Found user, but still unhappy\".\n  // If `findUser` rejected, `reason` will be \"`findUser` rejected and we're unhappy\".\n});\n```\nIf the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n```js\nfindUser().then(function (user) {\n  throw new PedagogicalException(\"Upstream error\");\n}).then(function (value) {\n  // never reached\n}).then(function (value) {\n  // never reached\n}, function (reason) {\n  // The `PedgagocialException` is propagated all the way down to here\n});\n```\n\nAssimilation\n------------\n\nSometimes the value you want to propagate to a downstream promise can only be\nretrieved asynchronously. This can be achieved by returning a promise in the\nfulfillment or rejection handler. The downstream promise will then be pending\nuntil the returned promise is settled. This is called *assimilation*.\n\n```js\nfindUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // The user's comments are now available\n});\n```\n\nIf the assimliated promise rejects, then the downstream promise will also reject.\n\n```js\nfindUser().then(function (user) {\n  return findCommentsByAuthor(user);\n}).then(function (comments) {\n  // If `findCommentsByAuthor` fulfills, we'll have the value here\n}, function (reason) {\n  // If `findCommentsByAuthor` rejects, we'll have the reason here\n});\n```\n\nSimple Example\n--------------\n\nSynchronous Example\n\n```javascript\nvar result;\n\ntry {\n  result = findResult();\n  // success\n} catch(reason) {\n  // failure\n}\n```\n\nErrback Example\n\n```js\nfindResult(function(result, err){\n  if (err) {\n    // failure\n  } else {\n    // success\n  }\n});\n```\n\nPromise Example;\n\n```javascript\nfindResult().then(function(result){\n  // success\n}, function(reason){\n  // failure\n});\n```\n\nAdvanced Example\n--------------\n\nSynchronous Example\n\n```javascript\nvar author, books;\n\ntry {\n  author = findAuthor();\n  books  = findBooksByAuthor(author);\n  // success\n} catch(reason) {\n  // failure\n}\n```\n\nErrback Example\n\n```js\n\nfunction foundBooks(books) {\n\n}\n\nfunction failure(reason) {\n\n}\n\nfindAuthor(function(author, err){\n  if (err) {\n    failure(err);\n    // failure\n  } else {\n    try {\n      findBoooksByAuthor(author, function(books, err) {\n        if (err) {\n          failure(err);\n        } else {\n          try {\n            foundBooks(books);\n          } catch(reason) {\n            failure(reason);\n          }\n        }\n      });\n    } catch(error) {\n      failure(err);\n    }\n    // success\n  }\n});\n```\n\nPromise Example;\n\n```javascript\nfindAuthor().\n  then(findBooksByAuthor).\n  then(function(books){\n    // found books\n}).catch(function(reason){\n  // something went wrong\n});\n```",
            "itemtype": "method",
            "name": "then",
            "params": [
                {
                    "name": "onFulfilled",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "onRejected",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "RSVP.Promise"
        },
        {
            "file": "lib/rsvp/promise.js",
            "line": 429,
            "description": "`catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\nas the catch block of a try/catch statement.\n\n```js\nfunction findAuthor(){\n  throw new Error(\"couldn't find that author\");\n}\n\n// synchronous\ntry {\n  findAuthor();\n} catch(reason) {\n  // something went wrong\n}\n\n// async with promises\nfindAuthor().catch(function(reason){\n  // something went wrong\n});\n```",
            "itemtype": "method",
            "name": "catch",
            "params": [
                {
                    "name": "onRejection",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "RSVP.Promise"
        },
        {
            "file": "lib/rsvp/promise.js",
            "line": 461,
            "description": "`finally` will be invoked regardless of the promise's fate just as native\ntry/catch/finally behaves\n\nSynchronous example:\n\n```js\nfindAuthor() {\n  if (Math.random() > 0.5) {\n    throw new Error();\n  }\n  return new Author();\n}\n\ntry {\n  return findAuthor(); // succeed or fail\n} catch(error) {\n  return findOtherAuther();\n} finally {\n  // always runs\n  // doesn't affect the return value\n}\n```\n\nAsynchronous example:\n\n```js\nfindAuthor().catch(function(reason){\n  return findOtherAuther();\n}).finally(function(){\n  // author was either found, or not\n});\n```",
            "itemtype": "method",
            "name": "finally",
            "params": [
                {
                    "name": "callback",
                    "description": "",
                    "type": "Function"
                },
                {
                    "name": "label",
                    "description": "optional string for labeling the promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Promise"
            },
            "class": "RSVP.Promise"
        },
        {
            "file": "lib/rsvp/race.js",
            "line": 3,
            "description": "This is a convenient alias for `RSVP.Promise.race`.",
            "itemtype": "method",
            "name": "race",
            "static": 1,
            "params": [
                {
                    "name": "array",
                    "description": "Array of promises.",
                    "type": "Array"
                },
                {
                    "name": "label",
                    "description": "An optional label. This is useful\nfor tooling.",
                    "type": "String"
                }
            ],
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/reject.js",
            "line": 3,
            "description": "This is a convenient alias for `RSVP.Promise.reject`.",
            "itemtype": "method",
            "name": "reject",
            "static": 1,
            "params": [
                {
                    "name": "reason",
                    "description": "value that the returned promise will be rejected with.",
                    "type": "Any"
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a promise rejected with the given `reason`.",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/resolve.js",
            "line": 3,
            "description": "This is a convenient alias for `RSVP.Promise.resolve`.",
            "itemtype": "method",
            "name": "resolve",
            "static": 1,
            "params": [
                {
                    "name": "value",
                    "description": "value that the returned promise will be resolved with",
                    "type": "Any"
                },
                {
                    "name": "label",
                    "description": "optional string for identifying the returned promise.\nUseful for tooling.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "a promise that will become fulfilled with the given\n`value`",
                "type": "Promise"
            },
            "class": "RSVP"
        },
        {
            "file": "lib/rsvp/rethrow.js",
            "line": 1,
            "description": "`RSVP.rethrow` will rethrow an error on the next turn of the JavaScript event\nloop in order to aid debugging.\n\nPromises A+ specifies that any exceptions that occur with a promise must be\ncaught by the promises implementation and bubbled to the last handler. For\nthis reason, it is recommended that you always specify a second rejection\nhandler function to `then`. However, `RSVP.rethrow` will throw the exception\noutside of the promise, so it bubbles up to your console if in the browser,\nor domain/cause uncaught exception in Node. `rethrow` will also throw the\nerror again so the error can be handled by the promise per the spec.\n\n```javascript\nfunction throws(){\n  throw new Error('Whoops!');\n}\n\nvar promise = new RSVP.Promise(function(resolve, reject){\n  throws();\n});\n\npromise.catch(RSVP.rethrow).then(function(){\n  // Code here doesn't run because the promise became rejected due to an\n  // error!\n}, function (err){\n  // handle the error here\n});\n```\n\nThe 'Whoops' error will be thrown on the next turn of the event loop\nand you can watch for it in your console. You can also handle it using a\nrejection handler given to `.then` or `.catch` on the returned promise.",
            "itemtype": "method",
            "name": "rethrow",
            "static": 1,
            "params": [
                {
                    "name": "reason",
                    "description": "reason the promise became rejected.",
                    "type": "Error"
                }
            ],
            "throws": [
                "Error"
            ],
            "class": "RSVP"
        }
    ],
    "warnings": [
        {
            "message": "param name missing: {function}",
            "line": " lib/rsvp/promise.js:22"
        }
    ]
}